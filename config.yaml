"style_green_header_table": |-
  <style>
  .customtable {
    max-width: 100%;
    margin-top: 10px;
    margin-bottom: 10px;
    border-width: 1px;
    border: 1px solid black;
    border-collapse: collapse;
    border-style: solid;
    overflow-x: auto;
    margin: 0 auto;
  }

  th, td {
    color: #6d6d6f;
    font-family: 'Helvetica', 'Arial', sans-serif;
    font-size: 18px;
    font-weight: bold;
    border-width: 1px;
    border: 1px solid black;
    padding: 4px;
    text-align: center;
    cursor: pointer;
  }

  th {
    color: #ffffff;
    background-color: #00b312;
  }

  @media only screen and (max-width: 480px) {
    .customtable {
      width: 100%;
      margin: 0;
      overflow-x: auto;
    }

    th, td {
      font-size: 13px;
      padding: 2px;
    }
  }

  @media only screen and (max-width: 768px) and (min-width: 481px){
    .customtable {
      width: 100%;
      margin: 0;
      overflow-x: auto;
    }

    th, td {
      font-size: 16px;
      padding: 2px;
    }
  }
  </style>

  <script>
    function sortTable(n) {
      var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
      table = document.querySelector(".customtable");
      switching = true;
      dir = "asc"; // Set the sorting direction to ascending

      while (switching) {
        switching = false;
        rows = table.rows;

        for (i = 1; i < rows.length - 1; i++) {
          shouldSwitch = false;
          x = rows[i].getElementsByTagName("TD")[n];
          y = rows[i + 1].getElementsByTagName("TD")[n];

          if (dir == "asc") {
            if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
              shouldSwitch = true;
              break;
            }
          } else if (dir == "desc") {
            if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
              shouldSwitch = true;
              break;
            }
          }
        }

        if (shouldSwitch) {
          rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
          switching = true;
          switchcount++;
        } else {
          if (switchcount == 0 && dir == "asc") {
            dir = "desc";
            switching = true;
          }
        }
      }

      updateSortIndicator(n, dir);
    }

    function updateSortIndicator(column, direction) {
      var headers = document.querySelectorAll(".icon");
      headers.forEach(function(header) {
        header.innerHTML = "";
      });
      var clickedHeader = document.querySelector(".customtable th:nth-child(" + (column + 1) + ")");
      clickedHeader.querySelector(".icon").innerHTML = direction === "asc" ? "↓" : "↑";
    }
  </script>
"tableclass": |-
  <table class='customtable'>
